enable_testing()
include(CTest)

function(parse_includes filename)
    file(READ ${filename} contents)
    string(REPLACE "\n" ";" contents ${contents})

    set(included_files "")
    foreach(line ${contents})
        if(line MATCHES "^// source: ")
            string(REGEX REPLACE "^// source: " "" line ${line})
            list(APPEND included_files "${CMAKE_CURRENT_LIST_DIR}/${line}")
        elseif(line MATCHES "^// compiler: ")
            string(REGEX REPLACE "^// compiler: " "" compiler_args ${line})
        endif()
    endforeach()

    # export values to parent scope
    set(included_files "${included_files}" PARENT_SCOPE)
    set(compiler_args "${compiler_args}" PARENT_SCOPE)
endfunction(parse_includes)

function(generate_test test_name test_file)
    get_filename_component(TEST_BASENAME ${test_file} NAME)
    string(REGEX REPLACE "\.c$" ".generate.c" TEST_GEN_SOURCE ${CMAKE_CURRENT_BINARY_DIR}/${TEST_BASENAME})
    # set(TEST_GEN_SOURCE ${CMAKE_CURRENT_BINARY_DIR}/${TEST_BASENAME}.gen.c)
    parse_includes(${test_file})

    set(TEST_EXEC_DIR ${CMAKE_CURRENT_BINARY_DIR})
    set(TEST_EXEC_PATH ${TEST_EXEC_DIR}/${test_name}.run)
    # since cmake doesn't work well with absolute path as dependency I need to use relative.
    file(RELATIVE_PATH TEST_EXEC_REL_PATH ${CMAKE_CURRENT_BINARY_DIR} ${TEST_EXEC_PATH})

    add_custom_command(OUTPUT ${TEST_EXEC_REL_PATH}
        COMMENT "Building test case ${test_name}"
        COMMAND ruby ${UNITY_ROOT}/auto/generate_test_runner.rb ${test_file} ${TEST_GEN_SOURCE}
        COMMAND mkdir -p ${TEST_EXEC_DIR} && /usr/bin/gcc 
            ${compiler_args}
            -O0 -g 
            --coverage
            -fno-sanitize-recover=all -fsanitize=undefined
            $(CMAKE_C_FLAGS) -fno-sanitize=alignment
            -I"${UNITY_ROOT}/src" -I"${UNITY_ROOT}/../" -I${CMAKE_CURRENT_SOURCE_DIR}/../tests
            -I${CMAKE_SOURCE_DIR}/kernel/libc/include
            -I${CMAKE_SOURCE_DIR}/kernel/libutils/include
            -I${CMAKE_SOURCE_DIR}/kernel/core/include
            -I${CMAKE_SOURCE_DIR}/kernel/hal/include
            -Wno-unused-variable -o ${TEST_EXEC_PATH}
            "${test_file}"
            "${TEST_GEN_SOURCE}"
            ${included_files}
            "${UNITY_ROOT}/src/unity.c"
            "${UNITY_ROOT}/../kernel_mocks.c"
            "-Wl,-lrt"
        DEPENDS 
            ${test_file}
            ${included_files}
            ${UNITY_ROOT}/src/unity.c
            ${UNITY_ROOT}/../kernel_mocks.c
    )

    # the "touch" in the run command to avoid the Make delete the test file after a failure running the tests
    add_custom_command(OUTPUT ${test_name}.touch
        COMMENT "Running test case ${test_name}:\nExecutable: ${TEST_EXEC_REL_PATH}\nReport: file://${TEST_EXEC_DIR}/coverage-report/${test_name}/index.html"
        COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure -R "${test_name}" ${test_name} -VVV && 
            touch ${CMAKE_BINARY_DIR}/${test_name}.touch &&
        # generates coverage report. To avoid mix results between tests, data from report are delete immediately after the test
            lcov -q -t ${test_name} --capture --directory ${TEST_EXEC_DIR} --output-file ${TEST_EXEC_DIR}/${test_name}.info &&
            genhtml -q ${TEST_EXEC_DIR}/${test_name}.info --output-directory ${TEST_EXEC_DIR}/coverage-report/${test_name} &&
            find ${TEST_EXEC_DIR} -name \\*.gcda -or -name \\*.gcno -or -name \\*.info -delete
        DEPENDS ${TEST_EXEC_REL_PATH}
    )

    # to avoid the "always build" of custom target, I have defined a add_custom_command with output as dependency
    add_custom_target(${test_name}
        DEPENDS ${test_name}.touch
    )

    # for use with ctest
    add_test(${test_name}
        ${TEST_EXEC_REL_PATH}
    )

endfunction(generate_test)

function(target_add_test target_name test_name test_file)
    generate_test(${test_name} ${test_file})

    # to allow rebuild and run the tests after the build or after the test code change, 
    # the target depends on the test (who depends on the test source)
    add_dependencies(${target_name} ${test_name})
endfunction(target_add_test)

